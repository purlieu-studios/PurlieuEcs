name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal --logger "trx;LogFileName=test-results.trx" --logger "console;verbosity=detailed" --collect:"XPlat Code Coverage"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: |
          **/test-results.trx
          **/coverage.cobertura.xml

    - name: Test Summary
      if: always()
      shell: bash
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        if find . -name "test-results.trx" -type f | grep -q .; then
          echo "Test results available in artifacts" >> $GITHUB_STEP_SUMMARY
        else
          echo "No test results found" >> $GITHUB_STEP_SUMMARY
        fi

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Check formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic

    - name: Run code analysis
      run: dotnet build --no-restore --configuration Release /p:TreatWarningsAsErrors=true /p:WarningLevel=5 /p:EnableNETAnalyzers=true

  performance-regression:
    name: Performance Regression Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout PR
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build Benchmark project
      run: dotnet build Purlieu.Ecs.Benchmark/Purlieu.Ecs.Benchmark.csproj --configuration Release || echo "Benchmark project not found"

    - name: Run quick benchmarks
      run: dotnet run --project Purlieu.Ecs.Benchmark/Purlieu.Ecs.Benchmark.csproj --configuration Release -- --job short --runtimes net8.0 --filter "*" --exporters json || echo "Benchmark project not found"

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: BenchmarkDotNet.Artifacts/**/*

    - name: Comment PR with benchmark results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Find benchmark results
          const artifactsDir = 'BenchmarkDotNet.Artifacts';
          if (fs.existsSync(artifactsDir)) {
            const results = fs.readdirSync(artifactsDir)
              .filter(file => file.endsWith('.json'))
              .map(file => fs.readFileSync(path.join(artifactsDir, file), 'utf8'));
            
            if (results.length > 0) {
              const comment = `## Benchmark Results\n\n\`\`\`json\n${results[0]}\n\`\`\``;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          }